swagger: '2.0'
info:
  title: "My API"
  description: API Gateway with a Cloud Run backend
  version: 1.0.0
schemes:
  - https
produces:
  - application/json
paths:
  /getType:
    get:
      operationId: getMoviesList
      x-google-backend:
        address: https://get-movies-func-nw2z6mefba-lz.a.run.app
      summary: Get List Of Movies
      parameters:
        - name: endpoint
          in: query
          description: Type of Movie List To Retrieve
          required: false
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string

  /search:
    get:
      operationId: getSearchMovies
      x-google-backend:
        address: https://search-movie-func-nw2z6mefba-lz.a.run.app
      summary: Get List Of Searched Movies
      parameters:
        - name: movieTitle
          in: query
          description: Movie Title To Search
          required: true
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string

  /createUser:
    post:
      operationId: postUserNeo4j
      x-google-backend:
        address: https://store-users-neo4j-func-nw2z6mefba-lz.a.run.app
      summary: Store the user in database
      parameters:
        - name: uid
          in: query
          description: UID of a user
          required: true
          type: string
        - name: username
          in: query
          description: Username of a user
          required: true
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string

    get:
      operationId: checkUserExists
      x-google-backend:
        address: https://store-users-neo4j-func-nw2z6mefba-lz.a.run.app
      summary: Check if the given username exists in db at registration
      parameters:
        - name: username
          in: query
          description: Username of a user
          required: true
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string
        '409':
          description: Username exists in db
          schema:
            type: string

  /getCastAndTrailer:
    get:
      operationId: getCastAndTrailer
      x-google-backend:
        address: https://get-cast-and-trailer-func-nw2z6mefba-lz.a.run.app/
      summary: Get Cast and Trailer for the movie
      parameters:
        - name: movieId
          in: query
          description: MovieId to retrieve cast and trailer
          required: true
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string

  /movieList:
    post:
      operationId: storeRemoveMovies
      x-google-backend:
        address: https://movie-lists-func-nw2z6mefba-lz.a.run.app
      summary: Store or delete movie list id's in database
      parameters:
        - name: uid
          in: query
          description: UID of a user
          required: true
          type: string
        - name: movieId
          in: query
          description: ID of a movie
          required: true
          type: string
        - name: list
          in: query
          description: Choice between 'watchlist' and 'favorites' lists
          required: true
          type: string
        - name: action
          in: query
          description: Store or remove a movie from the list
          required: true
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string
        '403':
          description: Invalid action
          schema:
            type: string

  /getList:
    get:
      operationId: getStoredMovies
      x-google-backend:
        address: https://retreive-lists-func-nw2z6mefba-lz.a.run.app
      summary: Retrieve lists of movies from database
      parameters:
        - name: uid
          in: query
          description: UID of a user
          required: true
          type: string
        - name: list
          in: query
          description: Choice between 'watchlist' and 'favorites' lists
          required: true
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string

  /random:
    get:
      operationId: randomMovies
      x-google-backend:
        address: https://random-movies-func-nw2z6mefba-lz.a.run.app
      summary: Get List Of Random Movies
      parameters:
        - name: number
          in: query
          description: Number of Movie To Retrieve
          required: true
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string

  /comments:
    post:
      operationId: postCommentForMovie
      x-google-backend:
        address: https://comment-func-nw2z6mefba-lz.a.run.app
      summary: Leave a comment and rating for a specific movie
      parameters:
        - name: uid
          in: query
          description: UID of a user
          required: true
          type: string
        - name: movieId
          in: query
          description: ID of a movie
          required: true
          type: string
        - name: content
          in: query
          description: Comment content
          required: true
          type: string
        - name: rating
          in: query
          description: Movie rating
          required: true
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string

    put:
      operationId: updateCommentForMovie
      x-google-backend:
        address: https://comment-func-nw2z6mefba-lz.a.run.app
      summary: Update a comment and rating for a specific movie
      parameters:
        - name: uid
          in: query
          description: UID of a user
          required: true
          type: string
        - name: movieId
          in: query
          description: ID of a movie
          required: true
          type: string
        - name: content
          in: query
          description: Comment content
          required: true
          type: string
        - name: rating
          in: query
          description: Movie rating
          required: true
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string

  /getDeleteComments:
    get:
      operationId: getCommentsForMovie
      x-google-backend:
        address: https://get-delete-comments-func-nw2z6mefba-lz.a.run.app
      summary: Retrieves all user comments for a specific movie from db
      parameters:
        - name: movieId
          in: query
          description: Movie ID to retrieve user comments for
          required: true
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string

    delete:
      operationId: deleteCommentsForMovie
      x-google-backend:
        address: https://get-delete-comments-func-nw2z6mefba-lz.a.run.app
      summary: Delete a specific comment for a specific movie from db
      parameters:
        - name: uid
          in: query
          description: UID of a user
          required: true
          type: string
        - name: movieId
          in: query
          description: Movie ID to delete user comment for
          required: true
          type: string
      responses:
        '200':
          description: A successful response
          schema:
            type: string